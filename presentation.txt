
                                            /******************************/
                                           /***  Events (Laravel 5.4)  ***/
                                          /******************************/


                /** Theoretical Part **/


1. Problem.

    Type of relationship between objects - One-To-Many.
    When the state of one of the object is changed we do some action( like notify other objects about this event).

2. Observer Pattern.

    The observer pattern is a software design pattern in which an object,
    the subject, maintains a list of its dependents, called observers,
    and notifies them automatically of any state changes, usually by calling one of their methods.

    It is mainly used to implement distributed event handling systems, in "event driven" software.
    Most modern languages such as Java and C# have built in "event" constructs which implement the observer pattern
    components, for easy programming and short code.

    The observer pattern is also a key part in the familiar model–view–controller (MVC) architectural pattern.
    The observer pattern is implemented in numerous programming libraries and systems,
    including almost all GUI toolkits.

3. How it works?

    When some event is happen the listener run callback function.

4. When we use events.

    Chat, Push-up message, Notification, Automatic sending email, Interactive part of site,
    Currency Exchange, Rialto, Auction etc


                /** Practical Part **/


1. How to create event by Event Facade.

 /routes/web.php

    Event::listen('eloquent.created: App\Task', function () {
        dd('Sending push message');
    });

2. How to generate event.

 1) /app/Providers/EventServiceProvider.php

    'App\Events\TaskWasPublished' => [
        'App\Listeners\NotifyBlogSubscribers',
    ]

 2) $ php artisan event:generate
    Events and listeners generated successfully!

    command generates new files

    /app/Listeners/NotifyBlogSubscribers.php
    /app/Events/TaskWasPublished.php

  3) /app/Task.php

      protected $events = [
          'created' => TaskWasPublished::class
      ];

  4) /app/Listeners/NotifyBlogSubscribers.php

      public function handle(TaskWasPublished $event) // do some action
      {
        dd($event->post->toArray());
      }

  5) app\Events\TaskWasPublished.php

      public $post;  // get created task

      public function __construct($post)
      {
          $this->post = $post;
      }

3. trait HasEvents.php  //getObservableEvents

     public function getObservableEvents()
     {
         return array_merge(
             [
                 'creating', 'created', 'updating', 'updated',
                 'deleting', 'deleted', 'saving', 'saved',
                 'restoring', 'restored',
             ],
             $this->observables
         );
     }






